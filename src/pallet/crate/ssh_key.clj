(ns pallet.crate.ssh-key
  (:require
   [pallet.stevedore :as stevedore]
   [pallet.utils :as utils]
   [pallet.resource.directory :as directory]
   [pallet.resource.remote-file :as remote-file]
   [clojure.contrib.string :as string])
  (:use
   [pallet.target :only [admin-group]]
   [pallet.template]
   [pallet.resource :only [defresource defaggregate]]
   [pallet.resource.user :only [user-home]]
   [pallet.resource.file :only [chmod chown file*]]
   [clojure.contrib.logging]))

(defn user-ssh-dir [user]
  (str (stevedore/script (user-home ~user)) "/.ssh/"))

(deftemplate authorized-keys-template
  [user keys]
  {{:path (str (user-ssh-dir user) "authorized_keys")
    :mode "0644" :owner user}
   (if (vector? keys)
     (string/join "\n" (map string/rtrim keys))
     keys)})

(defn authorize-key* [user public-key-string & options]
  (let [options (apply hash-map options)
        target-user (get options :authorize-for-user user)]
    (stevedore/do-script
     (stevedore/script
      (var auth_file ~(str (user-ssh-dir target-user) "authorized_keys")))
     (directory/directory* (user-ssh-dir target-user) :owner target-user :mode "755")
     (file* "${auth_file}" :owner target-user :mode "644")
     (stevedore/script
      (if-not (fgrep (quoted ~(string/trim public-key-string)) @auth_file)
        (echo (quoted ~public-key-string) ">>" @auth_file))))))

(defresource authorize-key
  "Authorize a public key on the specified user."
  authorize-key* [username public-key-string])

(defn authorize-key-for-localhost* [user public-key-filename & options]
  (let [options (apply hash-map options)
        target-user (get options :authorize-for-user user)]
    (stevedore/do-script
     (stevedore/script
      (var key_file ~(str (user-ssh-dir user) public-key-filename))
      (var auth_file ~(str (user-ssh-dir target-user) "authorized_keys")))
     (directory/directory* (user-ssh-dir target-user) :owner target-user :mode "755")
     (file* (str (user-ssh-dir target-user) "authorized_keys")
            :owner target-user :mode "644")
     (stevedore/checked-script "authorize-key"
      (if-not (grep @(cat @key_file) @auth_file)
        (cat @key_file ">>" @auth_file))))))

(defresource authorize-key-for-localhost
  "Authorize a user's public key on the specified user, for ssh access to
  localhost.  The :authorize-for-user option can be used to specify the
  user to who's authorized_keys file is modified."
  authorize-key-for-localhost* [username public-key-filename & options])

(defn install-key*
  [user key-name private-key-string public-key-string]
  (let [ssh-dir (user-ssh-dir user)]
    (stevedore/do-script
     (directory/directory* ssh-dir :owner user :mode "755")
     (remote-file/remote-file*
      (str ssh-dir key-name) :owner user :mode "600"
      :content private-key-string)
     (remote-file/remote-file*
      (str ssh-dir key-name ".pub") :owner user :mode "644"
      :content public-key-string))))

(defresource install-key
  "Install a ssh private key"
  install-key* [username private-key-name private-key-string public-key-string])

(def ssh-default-filenames
     {"rsa1" "identity"
      "rsa" "id_rsa"
      "dsa" "id_dsa"})

(defn generate-key*
  [user & options]
  (let [options (apply hash-map options)
        key-type (:type options "rsa")
        path (:file options
                    (stevedore/script
                     ~(str (user-ssh-dir user)
                           (ssh-default-filenames key-type))))
        ssh-dir (.getParent (java.io.File. path))
        passphrase (get options :passphrase "")]
    (stevedore/do-script
     (when-not (:no-dir options)
       (directory/directory* ssh-dir :owner user :mode "755"))
     (stevedore/checked-script "ssh-keygen"
      (var key_path ~path)
      (if-not (file-exists? @key_path)
        (ssh-keygen ~(stevedore/map-to-arg-string
                      {:f (stevedore/script @key_path)
                       :t key-type
                       :N (str \" passphrase \")
                       :C (str \" (or (:comment options "generated by pallet")) \")}))))
     (file* (stevedore/script @key_path) :owner user :mode "0600")
     (file* (str (stevedore/script @key_path) ".pub") :owner user :mode "0644"))))

(defresource generate-key
  "Generate an ssh key pair for the given user, unless one already
   exists. Options are:
     :file path     -- output file name
     :type key-type -- key type selection"
  generate-key* [username & options])
